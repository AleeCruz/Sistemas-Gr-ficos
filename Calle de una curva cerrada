import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

// Escena y cámara
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x330000); // Fondo rojo oscuro
scene.fog = new THREE.Fog(0x330000, 10, 50); // (Opcional) niebla apocalíptica

const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);
camera.position.set(0, 15, 15); // Ajusté la posición inicial de la cámara
camera.lookAt(0, 0, 0);

// Renderer
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// OrbitControls
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true; // para un movimiento suave

// Ejes coordenados
const axesHelper = new THREE.AxesHelper(8);
scene.add(axesHelper);

// Plano
const planeGeometry = new THREE.PlaneGeometry(10, 10);
const planeMaterial = new THREE.MeshBasicMaterial({ color: 0xf08080, side: THREE.DoubleSide });
const plane = new THREE.Mesh(planeGeometry, planeMaterial);
plane.rotation.x = -Math.PI / 2;
scene.add(plane); // Dejamos el plano visible para referencia

// Grilla
const grid = new THREE.GridHelper(10, 10, 0xaa0000, 0x550000);
scene.add(grid); // Dejamos la grilla visible para referencia

function buildStreetOnXZPlane() {
  const points = [
    new THREE.Vector3(4, 0, 0), // Los puntos ahora están en Y=0
    new THREE.Vector3(4, 0, 3),
    new THREE.Vector3(0, 0, 3),
    new THREE.Vector3(-3, 0, 4),
    new THREE.Vector3(-2, 0, 0),
    new THREE.Vector3(-4, 0, -4),
    new THREE.Vector3(0, 0, -4),
    new THREE.Vector3(2, 0, -2),
    new THREE.Vector3(4, 0, -2),
  ];

  const curve = new THREE.CatmullRomCurve3(points, true, 'catmullrom', 0.5);

  // Definir la forma de la calle (un rectángulo 2D) en el plano XY local
  const shape = new THREE.Shape();
  shape.moveTo(-1, 0.2); // Ancho de 2 unidades
  shape.lineTo(1, 0.2);
  shape.lineTo(1, 0); // Un "alto" pequeño en la dirección Y local
  shape.lineTo(-1, 0);
  shape.lineTo(-1, 0.3);

  // Opciones para la extrusión
  const extrudeSettings = {
    steps: 100, // Cantidad de segmentos a lo largo de la curva
    bevelEnabled: false,
    extrudePath: curve,
  };

  // Crear la geometría extruida
  const streetGeometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);

  // Crear un material básico para la superficie
  const streetMaterial = new THREE.MeshBasicMaterial({ color: 0x696969 }); // Gris oscuro para la calle
  const street = new THREE.Mesh(streetGeometry, streetMaterial);
  scene.add(street);

  // Crear un material de malla (wireframe)
  const wireframeMaterial = new THREE.LineBasicMaterial({ color: 0x000000, linewidth: 2 });
  const wireframe = new THREE.WireframeGeometry(streetGeometry);
  const line = new THREE.LineSegments(wireframe, wireframeMaterial);
  scene.add(line);

  // Opcional: Mostrar la curva guía (en azul)
  const curvePoints = curve.getPoints(50);
  const curveGeometry = new THREE.BufferGeometry().setFromPoints(curvePoints);
  const curveMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff });
  const curveObject = new THREE.Line(curveGeometry, curveMaterial);
  scene.add(curveObject);
}

// Animación
function animate() {
  requestAnimationFrame(animate);
  controls.update();
  renderer.render(scene, camera);
}

buildStreetOnXZPlane();
animate();

// Responsivo
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});



----------------------------------------------------------------------------------------
//segunda version mejorada
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

/**Aqui dentro esta todo lo relacionado a la camara, escenea, el render y
 * el orbits control
 * ------------------------------------------------
*/
// Escena y cámara
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x330000); // Fondo rojo oscuro
scene.fog = new THREE.Fog(0x330000, 10, 50); // (Opcional) niebla apocalíptica

const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
);
camera.position.set(0, 10, 10); // Ajusté la posición de la cámara para ver mejor la superficie
camera.lookAt(0, 0, 0);

// Renderer
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// OrbitControls
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true; // para un movimiento suave
/**------------------------------------------------------------ */



/*Aqui esta el codigo necesario para ingresar objetos en la escena
------------------------------------------------*/

//Ejes coordenados
const axesHelper = new THREE.AxesHelper(7); // el número define el largo de los ejes
scene.add(axesHelper);

// Plano
const planeGeometry = new THREE.PlaneGeometry(10, 10);
const planeMaterial = new THREE.MeshBasicMaterial({color: 0xf08080,side: THREE.DoubleSide,});
const plane = new THREE.Mesh(planeGeometry, planeMaterial);
plane.rotation.x = -Math.PI / 2;
scene.add(plane);

// Grilla
const grid = new THREE.GridHelper(10, 10, 0xaa0000, 0x550000);
scene.add(grid);

function buildCurveCatmullRoom() {
    const points = [
        new THREE.Vector3(4, 0, 0),
        new THREE.Vector3(4, 0, 3),
        new THREE.Vector3(0, 0, 3),
        new THREE.Vector3(-3, 0, 4),
        new THREE.Vector3(-2, 0, 0),
        new THREE.Vector3(-4, 0, -4),
        new THREE.Vector3(0, 0, -4),
        new THREE.Vector3(2, 0, -2),
        new THREE.Vector3(4, 0, -2),
        new THREE.Vector3(4, 0, 0),

    ];

    const curve = new THREE.CatmullRomCurve3(points, true , 'catmullrom', 1);
    const curvePoints = curve.getPoints(300); // más puntos = curva más suave

    const geometry = new THREE.BufferGeometry().setFromPoints(curvePoints);
    const material = new THREE.LineBasicMaterial({ color: 0x0000ff });

    const curveObject = new THREE.Line(geometry, material);
    scene.add(curveObject);

    return curve; // Devolvemos la curva para usarla en la extrusión
}

// 1. Definir la forma 2D (un rectángulo delgado)
const rectShape = new THREE.Shape();
rectShape.moveTo(-0.02, -0.25);
rectShape.lineTo(0.02, -0.25);
rectShape.lineTo(0.02, 0.25);
rectShape.lineTo(-0.02, 0.25);
rectShape.lineTo(-0.02, -0.25);

// 2. Obtener la curva de Catmull-Rom
const catmullRomCurve = buildCurveCatmullRoom();

// 3. Definir la configuración de la extrusión
const extrudeSettings = {
    steps: 400,
    bevelEnabled: false,
    extrudePath: catmullRomCurve,
};

// 4. Crear la geometría de barrido
const rectGeometry = new THREE.ExtrudeGeometry(rectShape, extrudeSettings);

// 5. Crear un material para la superficie de barrido
const rectMaterial = new THREE.MeshStandardMaterial({ color: 0xff8c00, wireframe: true });

// 6. Crear la malla de la superficie de barrido
const extrudedRect = new THREE.Mesh(rectGeometry, rectMaterial);
scene.add(extrudedRect);

// --- Luces ---
const ambientLight = new THREE.AmbientLight(0x404040);
scene.add(ambientLight);

const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
directionalLight.position.set(5, 5, 5);
scene.add(directionalLight);

// Opcional: Ayudante para visualizar la dirección de la luz direccional
// const directionalLightHelper = new THREE.DirectionalLightHelper(directionalLight, 1);
// scene.add(directionalLightHelper);
// --- Fin de Luces ---

// Animación
function animate() {
    requestAnimationFrame(animate);
    controls.update(); // Necesario si enableDamping = true
    renderer.render(scene, camera);
}

animate();

// Responsivo
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});


--------------------------------------------------------------------------------------------------------------------
//superficies de barrido sobre una curva de de catmullroom

import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

// Escena
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x000000); // Fondo negro

// Cámara
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(0, 10, 15);
camera.lookAt(0, 0, 0);

// Renderer
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// OrbitControls
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

// Grilla
const gridHelper = new THREE.GridHelper(10, 10, 0x808080, 0x808080);
scene.add(gridHelper);

const axesHelper = new THREE.AxesHelper(7);
scene.add(axesHelper);

// Plano XZ
const planeGeometry = new THREE.PlaneGeometry(20, 20);
const planeMaterial = new THREE.MeshBasicMaterial({ color: 0x555555, side: THREE.DoubleSide });
const plane = new THREE.Mesh(planeGeometry, planeMaterial);
plane.rotation.x = -Math.PI / 2;
scene.add(plane);

// 1. Definir la forma 2D (un rectángulo)
const rectShape = new THREE.Shape();
rectShape.moveTo(-0.5, -0.5);  // Centramos el rectángulo en el origen
rectShape.lineTo(0.5, -0.5);
rectShape.lineTo(0.5, 0.5);
rectShape.lineTo(-0.5, 0.5);
rectShape.lineTo(-0.5, -0.5);

// 2. Definir el camino de barrido (una curva Catmull-Rom)
const points = [
    new THREE.Vector3(0, 0, 0),
    new THREE.Vector3(5, 3, 2),
    new THREE.Vector3(10, 0, 0),
];
const linearCurve = new THREE.CatmullRomCurve3(points);

const extrudeSettings = {
    steps: 100,
    bevelEnabled: false,
    extrudePath: linearCurve,
};

// 3. Crear la geometría de barrido
const rectGeometry = new THREE.ExtrudeGeometry(rectShape, extrudeSettings);

// 4. Crear un material para la superficie de barrido
const rectMaterial = new THREE.MeshStandardMaterial({ color: 0xff8c00, wireframe: true});

// 5. Crear la malla de la superficie de barrido
const extrudedRect = new THREE.Mesh(rectGeometry, rectMaterial);
scene.add(extrudedRect);

// --- Visualización de la Curva de Catmull-Rom ---
const pointsForCurve = linearCurve.getPoints(50);
const curveGeometry = new THREE.BufferGeometry().setFromPoints(pointsForCurve);
const curveMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });
const catmullRomLine = new THREE.Line(curveGeometry, curveMaterial);
scene.add(catmullRomLine);
// --- Fin de la Visualización de la Curva ---

// --- Luces ---
const ambientLight = new THREE.AmbientLight(0x404040);
scene.add(ambientLight);

const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
directionalLight.position.set(5, 5, 5);
scene.add(directionalLight);

const directionalLightHelper = new THREE.DirectionalLightHelper(directionalLight, 1);
scene.add(directionalLightHelper);
// --- Fin de Luces ---

// Animación
function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
}

animate();

// Responsivo
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});
