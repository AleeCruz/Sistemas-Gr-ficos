{
  "version": 3,
  "sources": ["../../three/examples/jsm/physics/RapierPhysics.js"],
  "sourcesContent": ["import { Clock, Vector3, Quaternion, Matrix4 } from 'three';\n\nconst RAPIER_PATH = 'https://cdn.skypack.dev/@dimforge/rapier3d-compat@0.17.3';\n\nconst frameRate = 60;\n\nconst _scale = new Vector3( 1, 1, 1 );\nconst ZERO = new Vector3();\n\nlet RAPIER = null;\n\nfunction getShape( geometry ) {\n\n\tconst parameters = geometry.parameters;\n\n\t// TODO change type to is*\n\n\tif ( geometry.type === 'BoxGeometry' ) {\n\n\t\tconst sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n\t\tconst sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n\t\tconst sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n\n\t\treturn RAPIER.ColliderDesc.cuboid( sx, sy, sz );\n\n\t} else if ( geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry' ) {\n\n\t\tconst radius = parameters.radius !== undefined ? parameters.radius : 1;\n\t\treturn RAPIER.ColliderDesc.ball( radius );\n\n\t} else if ( geometry.type === 'CylinderGeometry' ) {\n\n\t\tconst radius = parameters.radiusBottom !== undefined ? parameters.radiusBottom : 0.5;\n\t\tconst length = parameters.height !== undefined ? parameters.height : 0.5;\n\n\t\treturn RAPIER.ColliderDesc.cylinder( length / 2, radius );\n\n\t} else if ( geometry.type === 'CapsuleGeometry' ) {\n\n\t\tconst radius = parameters.radius !== undefined ? parameters.radius : 0.5;\n\t\tconst length = parameters.height !== undefined ? parameters.height : 0.5;\n\n\t\treturn RAPIER.ColliderDesc.capsule( length / 2, radius );\n\n\t} else if ( geometry.type === 'BufferGeometry' ) {\n\n\t\tconst vertices = [];\n\t\tconst vertex = new Vector3();\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\tvertex.fromBufferAttribute( position, i );\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\t// if the buffer is non-indexed, generate an index buffer\n\t\tconst indices = geometry.getIndex() === null\n\t\t\t? Uint32Array.from( Array( parseInt( vertices.length / 3 ) ).keys() )\n\t\t\t: geometry.getIndex().array;\n\n\t\treturn RAPIER.ColliderDesc.trimesh( vertices, indices );\n\n\t}\n\n\treturn null;\n\n}\n\n/**\n * @classdesc Can be used to include Rapier as a Physics engine into\n * `three.js` apps. The API can be initialized via:\n * ```js\n * const physics = await RapierPhysics();\n * ```\n * The component automatically imports Rapier from a CDN so make sure\n * to use the component with an active Internet connection.\n *\n * @name RapierPhysics\n * @class\n * @hideconstructor\n * @three_import import { RapierPhysics } from 'three/addons/physics/RapierPhysics.js';\n */\nasync function RapierPhysics() {\n\n\tif ( RAPIER === null ) {\n\n\t\tRAPIER = await import( `${RAPIER_PATH}` );\n\t\tawait RAPIER.init();\n\n\t}\n\n\t// Docs: https://rapier.rs/docs/api/javascript/JavaScript3D/\n\n\tconst gravity = new Vector3( 0.0, - 9.81, 0.0 );\n\tconst world = new RAPIER.World( gravity );\n\n\tconst meshes = [];\n\tconst meshMap = new WeakMap();\n\n\tconst _vector = new Vector3();\n\tconst _quaternion = new Quaternion();\n\tconst _matrix = new Matrix4();\n\n\tfunction addScene( scene ) {\n\n\t\tscene.traverse( function ( child ) {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tconst physics = child.userData.physics;\n\n\t\t\t\tif ( physics ) {\n\n\t\t\t\t\taddMesh( child, physics.mass, physics.restitution );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction addMesh( mesh, mass = 0, restitution = 0 ) {\n\n\t\tconst shape = getShape( mesh.geometry );\n\n\t\tif ( shape === null ) return;\n\n\t\tshape.setMass( mass );\n\t\tshape.setRestitution( restitution );\n\n\t\tconst { body, collider } = mesh.isInstancedMesh\n\t\t\t? createInstancedBody( mesh, mass, shape )\n\t\t\t: createBody( mesh.position, mesh.quaternion, mass, shape );\n\n\t\tif ( ! mesh.userData.physics ) mesh.userData.physics = {};\n\n\t\tmesh.userData.physics.body = body;\n\t\tmesh.userData.physics.collider = collider;\n\n\t\tif ( mass > 0 ) {\n\n\t\t\tmeshes.push( mesh );\n\t\t\tmeshMap.set( mesh, { body, collider } );\n\n\t\t}\n\n\t}\n\n\tfunction removeMesh( mesh ) {\n\n\t\tconst index = meshes.indexOf( mesh );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tmeshes.splice( index, 1 );\n\t\t\tmeshMap.delete( mesh );\n\n\t\t\tif ( ! mesh.userData.physics ) return;\n\n\t\t\tconst body = mesh.userData.physics.body;\n\t\t\tconst collider = mesh.userData.physics.collider;\n\n\t\t\tif ( body ) removeBody( body );\n\t\t\tif ( collider ) removeCollider( collider );\n\n\t\t}\n\n\t}\n\n\tfunction createInstancedBody( mesh, mass, shape ) {\n\n\t\tconst array = mesh.instanceMatrix.array;\n\n\t\tconst bodies = [];\n\t\tconst colliders = [];\n\n\t\tfor ( let i = 0; i < mesh.count; i ++ ) {\n\n\t\t\tconst position = _vector.fromArray( array, i * 16 + 12 );\n\t\t\tconst { body, collider } = createBody( position, null, mass, shape );\n\t\t\tbodies.push( body );\n\t\t\tcolliders.push( collider );\n\n\t\t}\n\n\t\treturn { body: bodies, collider: colliders };\n\n\t}\n\n\tfunction createBody( position, quaternion, mass, shape ) {\n\n\t\tconst desc = mass > 0 ? RAPIER.RigidBodyDesc.dynamic() : RAPIER.RigidBodyDesc.fixed();\n\t\tdesc.setTranslation( ...position );\n\t\tif ( quaternion !== null ) desc.setRotation( quaternion );\n\n\t\tconst body = world.createRigidBody( desc );\n\t\tconst collider = world.createCollider( shape, body );\n\n\t\treturn { body, collider };\n\n\t}\n\n\tfunction removeBody( body ) {\n\n\t\tif ( Array.isArray( body ) ) {\n\n\t\t\tfor ( let i = 0; i < body.length; i ++ ) {\n\n\t\t\t\tworld.removeRigidBody( body[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tworld.removeRigidBody( body );\n\n\t\t}\n\n\t}\n\n\tfunction removeCollider( collider ) {\n\n\t\tif ( Array.isArray( collider ) ) {\n\n\t\t\tfor ( let i = 0; i < collider.length; i ++ ) {\n\n\t\t\t\tworld.removeCollider( collider[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tworld.removeCollider( collider );\n\n\t\t}\n\n\t}\n\n\tfunction setMeshPosition( mesh, position, index = 0 ) {\n\n\t\tlet { body } = meshMap.get( mesh );\n\n\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\tbody = body[ index ];\n\n\t\t}\n\n\t\tbody.setAngvel( ZERO );\n\t\tbody.setLinvel( ZERO );\n\t\tbody.setTranslation( position );\n\n\t}\n\n\tfunction setMeshVelocity( mesh, velocity, index = 0 ) {\n\n\t\tlet { body } = meshMap.get( mesh );\n\n\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\tbody = body[ index ];\n\n\t\t}\n\n\t\tbody.setLinvel( velocity );\n\n\t}\n\n\tfunction addHeightfield( mesh, width, depth, heights, scale ) {\n\n\t\tconst shape = RAPIER.ColliderDesc.heightfield( width, depth, heights, scale );\n\t\t\n\t\tconst bodyDesc = RAPIER.RigidBodyDesc.fixed();\n\t\tbodyDesc.setTranslation( mesh.position.x, mesh.position.y, mesh.position.z );\n\t\tbodyDesc.setRotation( mesh.quaternion );\n\t\t\n\t\tconst body = world.createRigidBody( bodyDesc );\n\t\tworld.createCollider( shape, body );\n\t\t\n\t\tif ( ! mesh.userData.physics ) mesh.userData.physics = {};\n\t\tmesh.userData.physics.body = body;\n\t\t\n\t\treturn body;\n\n\t}\n\n\t//\n\n\tconst clock = new Clock();\n\n\tfunction step() {\n\n\t\tworld.timestep = clock.getDelta();\n\t\tworld.step();\n\n\t\t//\n\n\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\tconst mesh = meshes[ i ];\n\n\t\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\t\tconst array = mesh.instanceMatrix.array;\n\t\t\t\tconst { body: bodies } = meshMap.get( mesh );\n\n\t\t\t\tfor ( let j = 0; j < bodies.length; j ++ ) {\n\n\t\t\t\t\tconst body = bodies[ j ];\n\n\t\t\t\t\tconst position = body.translation();\n\t\t\t\t\t_quaternion.copy( body.rotation() );\n\n\t\t\t\t\t_matrix.compose( position, _quaternion, _scale ).toArray( array, j * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tmesh.instanceMatrix.needsUpdate = true;\n\t\t\t\tmesh.computeBoundingSphere();\n\n\t\t\t} else {\n\n\t\t\t\tconst { body } = meshMap.get( mesh );\n\n\t\t\t\tmesh.position.copy( body.translation() );\n\t\t\t\tmesh.quaternion.copy( body.rotation() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// animate\n\n\tsetInterval( step, 1000 / frameRate );\n\n\treturn {\n\t\tRAPIER,\n\t\tworld,\n\t\t/**\n\t\t * Adds the given scene to this physics simulation. Only meshes with a\n\t\t * `physics` object in their {@link Object3D#userData} field will be honored.\n\t\t * The object can be used to store the mass and restitution of the mesh. E.g.:\n\t\t * ```js\n\t\t * box.userData.physics = { mass: 1, restitution: 0 };\n\t\t * ```\n\t\t *\n\t\t * @method\n\t\t * @name RapierPhysics#addScene\n\t\t * @param {Object3D} scene The scene or any type of 3D object to add.\n\t\t */\n\t\taddScene: addScene,\n\n\t\t/**\n\t\t * Adds the given mesh to this physics simulation.\n\t\t *\n\t\t * @method\n\t\t * @name RapierPhysics#addMesh\n\t\t * @param {Mesh} mesh The mesh to add.\n\t\t * @param {number} [mass=0] The mass in kg of the mesh.\n\t\t * @param {number} [restitution=0] The restitution/friction of the mesh.\n\t\t */\n\t\taddMesh: addMesh,\n\n\t\t/**\n\t\t * Removes the given mesh from this physics simulation.\n\t\t *\n\t\t * @method\n\t\t * @name RapierPhysics#removeMesh\n\t\t * @param {Mesh} mesh The mesh to remove.\n\t\t */\n\t\tremoveMesh: removeMesh,\n\n\t\t/**\n\t\t * Set the position of the given mesh which is part of the physics simulation. Calling this\n\t\t * method will reset the current simulated velocity of the mesh.\n\t\t *\n\t\t * @method\n\t\t * @name RapierPhysics#setMeshPosition\n\t\t * @param {Mesh} mesh The mesh to update the position for.\n\t\t * @param {Vector3} position - The new position.\n\t\t * @param {number} [index=0] - If the mesh is instanced, the index represents the instanced ID.\n\t\t */\n\t\tsetMeshPosition: setMeshPosition,\n\n\t\t/**\n\t\t * Set the velocity of the given mesh which is part of the physics simulation.\n\t\t *\n\t\t * @method\n\t\t * @name RapierPhysics#setMeshVelocity\n\t\t * @param {Mesh} mesh The mesh to update the velocity for.\n\t\t * @param {Vector3} velocity - The new velocity.\n\t\t * @param {number} [index=0] - If the mesh is instanced, the index represents the instanced ID.\n\t\t */\n\t\tsetMeshVelocity: setMeshVelocity,\n\n\t\t/**\n\t\t * Adds a heightfield terrain to the physics simulation.\n\t\t * \n\t\t * @method\n\t\t * @name RapierPhysics#addHeightfield\n\t\t * @param {Mesh} mesh - The Three.js mesh representing the terrain.\n\t\t * @param {number} width - The number of vertices along the width (x-axis) of the heightfield.\n\t\t * @param {number} depth - The number of vertices along the depth (z-axis) of the heightfield.\n\t\t * @param {Float32Array} heights - Array of height values for each vertex in the heightfield.\n\t\t * @param {Object} scale - Scale factors for the heightfield dimensions.\n\t\t * @param {number} scale.x - Scale factor for width.\n\t\t * @param {number} scale.y - Scale factor for height.\n\t\t * @param {number} scale.z - Scale factor for depth.\n\t\t * @returns {RigidBody} The created Rapier rigid body for the heightfield.\n\t\t */\n\t\taddHeightfield: addHeightfield\n\n\t};\n\n}\n\nexport { RapierPhysics };\n"],
  "mappings": "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",
  "names": []
}
